#!/usr/bin/env bash

# =============================================================================
# Variable VVV - A VVV Site Setup Script
# By Brad Parbs <brad@bradparbs.com>
# Originally by Alison Barrett <alison@barre.tt>
# https://github.com/bradp/vvv-site-wizard
#
# Version 1.4.6
#
# This script automates the creation & deletion of new WordPress sites using
# Varying Vagrant Vagrants (https://github.com/Varying-Vagrant-Vagrants/VVV).
#
#	 ██    ██ ██    ██
#	░██   ░██░██   ░██ 	  ▓▓▓▓▓▓▓▓▓▓
#	░░██ ░██ ░░██ ░██ 	 ░▓ author ▓ Brad Parbs <brad@bradparbs.com>
#	 ░░████   ░░████     ░▓ github ▓ http://github.com/bradp/vv
#	  ░░██     ░░██      ░▓▓▓▓▓▓▓▓▓▓
#	   ░░       ░░   	 ░░░░░░░░░░
#
#
# =============================================================================

version_number=1.4.6

normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)

function version () {
echo "vv version $version_number"
}

# Usage: info "message"
# Example: info "doing thing"
# Output (to STDOUT): doing thing
function info () {
    printf "%b" "${blue}$1${normal} \n"
}

# Usage: success "message"
# Example: success "It's Working"
# Output (to STDOUT): [...] It's Working
function success () {
    printf "%b" "[${green}Success${normal}]${green} $1 ${normal}\n"
}

# Usage: warning "message"
# Example: warning "some warning"
# Output (to STDOUT): [...] some warning
function warning () {
    printf "%b" "${red} $1 ${normal}\n"
}

# Usage: prompt "question"
# Example: prompt "Site name"
# Output (to STDOUT): Site Name:
function prompt () {
    printf "%b" "${yellow} $1: ${normal}"
}

# Usage: error ["message"]
# Example: error "this is an error"
# Output (to STDERR): [ERROR] this is an error
function error () {
    printf "%b" "[${bold}${red}Error${normal}]${bold}${red} ${1:-'Unkown Error'}${normal}\n" >&2
}

# Usage: fail "message" [exit_code]
# Example: fail "Unknown Option" 254
function fail () {
    error "$1"
}

function check_for_update () {
	github_version=$(curl -s https://api.github.com/repos/bradp/vv/tags | grep "\"name\": \"" | head -n 1 | sed 's/"name": "//' | sed 's/",//' | sed 's/ //g' )
	if [[ ! $version_number = $github_version ]]; then
		info "Your version of vv does not match the current Github version. Please update with vv --update"
	fi
}

function check_how_installed () {
	if [[ ! -z $(which brew) ]]; then
		brew_install_location=$(brew --prefix)
		if [[ -f $brew_install_location"/bin/vv" ]]; then
			installed_with_brew="true"
		else
			installed_with_brew="false"
		fi
	fi
}

function install_update () {
	check_how_installed
	update_vv
}

function update_vv () {
	if [[ $installed_with_brew = "true" ]]; then
		info "Updating vv via Brew..."
		brew cleanup
		brew reinstall vv
	else
		info "Updating vv..."
		vv_bootstrap_update
	fi
}

function vv_bootstrap_update () {
	github_version=$(curl -s https://api.github.com/repos/bradp/vv/tags | grep "\"name\": \"" | head -n 1 | sed 's/"name": "//' | sed 's/",//' | sed 's/ //g' )
	download_link="https://github.com/bradp/vv/archive/"$github_version".tar.gz"
	vv_install_location=$(which vv)
	curl -L -o ~/"$github_version".tar.gz "$download_link" 2>/dev/null
	tar -C ~/ -zxvf ~/"$github_version".tar.gz 2>/dev/null
	rm ~/"$github_version".tar.gz
	echo "$(cat ~/vv-"$github_version"/vv)" > "$vv_install_location"
	rm -rf ~/vv-"$github_version"
	success "vv has been updated to the latest version. Thanks!"
}

function auto_update_main () {

	if [[ ! $auto_update_disable = "true" ]]; then
		if [ ! -f ~/.vv-update ]; then
			_update_vv_update
		else
			source ~/.vv-update

			epoch_diff=$(($(_current_epoch) - $DAYS_SINCE_UPDATE_CHECK))
			epoch_target=7
			if [[ $epoch_diff -gt $epoch_target ]]; then
				info "vv is out of date. Checking for update."
				github_version=$(curl -s https://api.github.com/repos/bradp/vv/tags | grep "\"name\": \"" | head -n 1 | sed 's/"name": "//' | sed 's/",//' | sed 's/ //g' )
				if [[ ! $version_number = $github_version ]]; then
					update_vv
					rm ~/.vv-update
					_update_vv_update
				fi
			fi
		fi
	fi
}

function _current_epoch() {
  seconds=$(date +%s)
  echo $(($seconds/60/60/24))
}

function _update_vv_update() {
	touch ~/.vv-update
	echo "DAYS_SINCE_UPDATE_CHECK=$(_current_epoch)" > ~/.vv-update
}

# ask function https://gist.github.com/davejamesmiller/1965569
# Usage: ask "Yes or No?" [default option]
# Example: if "Yes or No?" Y; then
function ask () {
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt_tail="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt_tail="y/N"
            default=N
        else
            prompt_tail="y/n"
            default=
        fi

        # Ask the question
        prompt "$1 [$prompt_tail]"
        read -r REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

function about() {
	cat <<ABOUT
	${magenta}
	 ██    ██ ██    ██
	░██   ░██░██   ░██ 	 ▓▓▓▓▓▓▓▓▓▓
	░░██ ░██ ░░██ ░██  	░▓ author ▓  Brad Parbs <brad@bradparbs.com>
	 ░░████   ░░████  	░▓ github ▓  http://github.com/bradp/vv
	  ░░██     ░░██  	░▓▓▓▓▓▓▓▓▓▓
	   ░░       ░░  	░░░░░░░░░░
${normal}
ABOUT
}


# Usage: show_help [exit_code]
# Example: show_help 254
function show_help () {
    cat <<HELP

   ${bold} USAGE: ${normal}
        vv [OPTION]...

    ${bold} OPTIONS: ${normal}
        --help, -h 		Show this help and usage
        --version 		Show current vv version
        --about 		Show project info

        --list,	-l, list 	List all VVV sites
        --create, -c, create 	Create a new site
        --remove, -r, remove 	Remove a site

        --blueprint-init 	Initialize blueprint file

	--deployment-create 	Create a deployment
	--deployment-remove 	Remove a deployment
        --deployment-config 	Manually configure deployment

        --vagrant, -v, v 	Pass vagrant command through to VVV.

        --path,	-p 		Path to VVV installation
        --force_path, -fp 	Override vv auto-VVV locating

    ${bold} NEW SITE OPTIONS: ${normal}
        --domain, -d 		Domain of new site
        --live_url, -u 		Live URL of site
        --files, -f 		Do not provision Vagrant, just create the site directory and files
        --images, -i 		Load images by proxy from the live site
        --name, -n 		Desired name for the site directory (e.g. mysite)
        --wp_version, -wv 	Version of WordPress to install
        --debug, -x 		Turn on WP_DEBUG and WP_DEBUG_LOG
        --multisite, -m 	Install as a multisite
        --sample-content, -sc 	Add sample content to site
        --username  		Admin username
        --password  		Admin password
        --email  		Admin email
        --git-repo  		Git repo to clone as wp-content
        --blueprint, -b 	Name of blueprint to use


    ${bold} EXAMPLE:${normal}
        vv --create --domain mysite.dev --name mysite --debug
        vv -c -d mysite.dev -n mysite -x

HELP
}

function argument_expected() {
    fail "$1 expected an argument"
}

function check_for_config_file() {
	test -f ~/.vv-config && got_config="true"

	if [ ! -z $got_config ]; then
		load_config_values
	else
		if [[ ! $showing_help = true ]]; then
			info "	"
			info "Looks like it's your first time running ${magenta}vv${normal}. "
			info "${magenta}vv${normal} couldn't find a config file, so we will create one now."
			info "This step only needs to be done once."
			info "	"
			get_vvv_path
			create_config_file
		fi
	fi
}

function create_config_file() {
{
	echo "{"
	echo "	\"path\": \"$path\""
	echo "}"
} >> ~/.vv-config
info "$HOME/.vv-config was created."
info "	"

}

function getJsonVal () {
    python -c "import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))";
}

function load_config_values() {
	#Load path from config file
	path="$( getJsonVal "['path']" < ~/.vv-config )"
	path="$(echo "$path" | sed -e 's/^"//'  -e 's/"$//')"
}

function load_config_autopdate_config_values() {
	#Load path from config file
	auto_update_disable_config="$( getJsonVal "['auto_update_disable']" < ~/.vv-config )"
	auto_update_disable_config="$(echo "$auto_update_disable_config" | sed -e 's/^"//'  -e 's/"$//')"
	if [[ $auto_update_disable_config = "true" ]]; then
		auto_update_disable="true"
	fi
}

function load_default_values() {
	defaults="$( getJsonVal "['defaults']" < ~/.vv-config )"
	defaults="$(echo "$defaults" | sed -e 's/^"//'  -e 's/"$//')"
}

function get_vvv_path(){
	if [ ! -z "$force_path" ]; then
		unset path
	fi

	if [ ! -z "$path" ]; then
		if [ ! -e "$(eval echo "${path//>}")/Vagrantfile" ]; then
			error "Path specified is not a VVV root directory."
			unset path

			while [ -z $path ]; do
				read -r -e -p "VVV install directory: " path

				# Make sure directory is actually a VVV root
				if [ ! -e "$(eval echo "${path//>}")/Vagrantfile" ]; then
					error "Path specified is not a VVV root directory."
					unset path
				fi
				path=$(eval echo "${path//>}")
			done

		else
			path=$path
			path=$(eval echo "${path//>}")
		fi


	else
		current_dir=$(pwd)
		if [ -e "$current_dir/Vagrantfile" ]; then
			path=$(pwd)
		elif [ -e ~/Sites/Vagrantfile ] && [ -z $force_path ]; then
			path=~/Sites
		elif [ -e ~/vagrant/Vagrantfile ] && [ -z $force_path ]; then
			path=~/vagrant
		elif [ -e ~/vagrant-local/Vagrantfile ] && [ -z $force_path ]; then
			path=~/vagrant-local
		elif [ -e ~/projects/vvv/Vagrantfile ] && [ -z $force_path ]; then
			path=~/projects/vvv
		elif [ -e ~/working/vvv/Vagrantfile ] && [ -z $force_path ]; then
			path=~/working/vvv
		elif [ -e ~/vvv/Vagrantfile ] && [ -z $force_path ]; then
			path=~/vvv
		else
			while [ -z $path ]; do
				read -r -e -p "VVV install directory: " path

				# Make sure directory is actually a VVV root
				if [ ! -e "$(eval echo "${path//>}")/Vagrantfile" ]; then
					error "Path specified is not a VVV root directory."
					unset path
				fi
				path=$(eval echo "${path//>}")
			done
		fi
	fi
	path=${path%/}
}

function get_list_sites() {
	clean_saved=$clean
	clean="true"
	sites=$(list_sites)
	clean=$clean_saved
}

function list_sites() {
	cd "$path"/www
	find . -maxdepth 1 -mindepth 1 -type d -print0 | while IFS= read -r -d '' filename; do
		filename=${filename:2}
		if [[ $filename != 'default' && $filename != 'phpcs' && $filename != 'wp-cli' ]]; then
			if [[ $filename = 'wordpress-default' || $filename = 'wordpress-develop' || $filename = 'wordpress-trunk' ]]; then
				if [[ $filename = 'wordpress-default' ]]; then
					url=local.wordpress.dev
				elif [[ $filename = 'wordpress-develop' ]]; then
					url=src.wordpress-develop.dev
				elif [[ $filename = 'wordpress-trunk' ]]; then
					url=local.wordpress-trunk.dev
				fi

				if [[ ! $clean = "true" ]]; then
					printf "	* %-30s %s %s\n" "${green}$filename${normal}" "${yellow}($url)${normal}" "${cyan}[VVV default]${normal}"
				fi
			else
				# @TODO fix having Multiple URLs in vvv-hosts
				url=$(<"$path"/www/"$filename"/vvv-hosts)
				url=$(echo "$url" | sed -e 's/#.*$//' -e '/^$/d')
				urls=$(echo "$url" | wc -l)
				if (( "$urls" > 1 )); then
					url="$(echo "$url" | paste -d ' ' - -)"
				fi
				if [[ ! $clean = "true" ]]; then
					printf "	* %-30s %s\n" "${green}$filename${normal}" "${yellow}($url)${normal}"
				else
					printf "$filename\n"
				fi
			fi
		fi
	done
	exit
}

function site_creation_questions() {
	files_only_text=''
	if [[ "$files_only" = true ]]; then
		files_only_text=" (file creation only)"
	fi
	info "New VVV Site Setup$files_only_text"

	# Prompt user for vars
	# =============================================================================

	# Get site dir name if not supplied as argument
	if [ ! -z "$site" ]; then
		if [ -d "$path/www/$site" ]; then
			error "Directory $path/www/$site alread -ry exists."
			unset site
		fi
	fi
	while [ -z "$site" ]; do
		prompt "Name of new site directory"
		read -r site

		if [ -z "$site" ]; then
			error "You must enter a directory name."
		elif [ -d "$path/www/$site" ]; then
			error "Directory alread -ry exists."
			unset site
		fi
	done

	# Get database name
	db_name=$site

	if [[ -f "$path"/vv-blueprints.json ]]; then
		# Get local URL
		if [ -z "$blueprint" ]; then
			prompt "Blueprint to use (leave blank for none)"
			read -r blueprint
			if [ -z "$blueprint" ]; then
				unset blueprint
			fi
		fi
	fi

	# Get local URL
	while [ -z "$domain" ]; do
		prompt "Domain to use (leave blank for $site.dev)"
		read -r domain
		if [ -z "$domain" ]; then
			domain="$site.dev"
		fi
	done

	if [ ! -z "$version" ]; then
		# Attempt to verify the existence of the version (hacky)
		if curl -s http://codex.wordpress.org/Version_"$version" | grep 'currently no text' > /dev/null; then
			error "Version $version not found, try again"
			unset version
		else
			installversion=" --version=$version"
		fi
	fi

	while [[ -z "$version" ]]; do
		# Get WordPress version
		prompt "WordPress version to install (leave blank for latest version)"
		read -r version
		if [ -z "$version" ]; then
			installversion=""
			version="(release version)"
		else
			# Attempt to verify the existence of the version (hacky)
			if curl -s http://codex.wordpress.org/Version_"$version" | grep 'currently no text' > /dev/null; then
				error "Version \"$version\" not found, try again"
				unset version
			else
				installversion=" --version=$version"
			fi
		fi
	done

	if [ -z "$multisite" ]; then
		prompt "Install as multisite? (y/N)"
		read -r multisite
		if [[ $multisite = 'y' ]]; then
			install_text='multisite-install'
		else
			install_text='install'
		fi
	fi

	if [[ $multisite = "y" ]]; then
		while [[ -z $ms_type ]]; do
			prompt "Install as subdomain or subdirectory? "
			read -r ms_type
			if [[ $ms_type != 'subdomain' && $ms_type != 'subdirectory' ]]; then
				error "Type must be subdomain or subdirectory."
				unset ms_type
			fi
		done
	fi

	if [[ $ms_type = 'subdomain' ]]; then
		install_text='multisite-install --subdomains'
	fi

	if [ -z "$git_repo" ]; then
		prompt "Git repo to clone as wp-content (leave blank to skip)"
		read -r git_repo
	fi

	add_placeholder_content="";
	if [ -z "$placeholder_content" ]; then
		prompt "Add sample content to site (y/N)"
		read -r placeholder_content
		if [[ $placeholder_content = "y" ]]; then
			add_placeholder_content="curl -s https://raw.githubusercontent.com/manovotny/wptest/master/wptest.xml > import.xml && wp import import.xml -authors=skip --allow-root && rm import.xml"
		fi
	fi

	# Ask if WP_DEBUG should be turned on
	while [ -z "$wp_debug" ]; do
		prompt "Enable WP_DEBUG and WP_DEBUG_LOG (y/N)"
		read -r wp_debug
		if [[ $wp_debug != 'y' && $wp_debug != 'n' ]]; then
			wp_debug="n"
		fi
	done

	if [[ $image_proxy == 'y' ]]; then
		while [ -z "$live_site_url" ]; do
			prompt "Live site URL (no http:// or trailing slash)"
			read -r live_site_url
		done
	fi

	if [ -z "$username" ]; then
		username="admin"
	fi
	if [ -z "$password" ]; then
		password="password"
	fi
	if [ -z "$email" ]; then
		email="admin@localhost.dev"
	fi
}

function confirm_site_creation() {
	# Inform the user of what's about to happen and give them a chance to back out
	# =============================================================================
	info "\nAbout to perform the following:"
	# @ TODO
	echo -e "* Halt Vagrant (if running)\n* Create directory $site in $path/www\n* Create files vvv-init.sh, wp-cli.yml, and vvv-hosts in directory $site\n* Create file $site.conf in $path/config/nginx-config/sites"
	if [[ "$files_only" = false ]]; then
		echo -e "* Run \`vagrant up --provision\` to initialize site"
	else
		warning "\nNote: You will need to run \`vagrant up --provision\` to initialize the new site before $domain will load in a browser."
	fi

	info "\nProvisioning Vagrant will do the following:"
	echo -e "* Create database $site\n* Install WordPress $version in the htdocs directory\n* Make the site visible at $domain"

	info "\n"
	while [ -z "$continue_create" ]; do
		prompt "Continue (y/n)? "
		read -r continue_create

		if [[ $continue_create = 'n' ]]; then
			error "Site setup aborted."
			exit
		elif [[ $continue_create != 'y' ]]; then
			error "Answer y or n."
			unset continue_create
		fi
	done

	success "New VVV setup starting for site '$site'"
	cd "$path"
	vagrant halt
}

function create_site_files(){
	# Create site folder with vvv-init.sh file
	# =============================================================================
	cd "$path"/www
	info "Creating site directory, wp-cli.yml, and vvv-init.sh file... "
	mkdir "$site" && cd "$site"

	printf "path: htdocs" > wp-cli.yml

	wp_debug_text=''
	if [[ $wp_debug = 'y' ]]; then
		wp_debug_text=" --extra-php <<PHP
define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true);
PHP"
	fi

	blueprint_text=''
	if [[ ! -z "$blueprint" ]]; then
		cp "$path"/vv-blueprints.json "$path"/www/"$site"/vv-blueprints.json
		blueprint_text="curl -o vv-install -s https://raw.githubusercontent.com/bradp/vv/vv-install/vv-install && php vv-install $blueprint && rm vv-blueprints.json"
	fi

	# Create SQL commands for database creation
    # =============================================================================
    if [ ! -e "$path"/database/init-custom.sql ]; then
		touch "$path"/database/init-custom.sql
    fi
    printf "CREATE DATABASE IF NOT EXISTS \`%s\`;\n"\
"GRANT ALL PRIVILEGES ON \`%s\`.* TO 'wp'@'localhost' IDENTIFIED BY 'wp';\n" "$db_name" >> "$path"/database/init-custom.sql

	{
		echo "	echo \"Creating database '$site' (if it does not exist)...\""
		echo "mysql -u root --password=root -e \"CREATE DATABASE IF NOT EXISTS \\\`$db_name\\\`\""
		echo "mysql -u root --password=root -e \"GRANT ALL PRIVILEGES ON \\\`$db_name\\\`.* TO wp@localhost IDENTIFIED BY 'wp';\""
		echo "	"
		echo "if [ ! -d \"htdocs/wp-admin\" ]; then"
		echo "	echo 'Installing WordPress $version in $site/htdocs...'"
		echo "	mkdir ./htdocs"
		echo "	cd ./htdocs"
		echo "	wp core download --allow-root $installversion"
		echo "	wp core config --dbname=\"$db_name\" --dbuser=wp --dbpass=wp --dbhost=\"localhost\" --allow-root$wp_debug_text"
		echo "	wp core $install_text --url=$domain --title=\"$site\" --admin_user=$username --admin_password=$password --admin_email=$email --allow-root"
		echo "	$add_placeholder_content"
		echo "	"
		echo "	cd -"
		echo "$blueprint_text"
		echo "fi"
	} >> vvv-init.sh

	echo "Done"

	# Add vvv-hosts file for domain in the site's www root
	# =============================================================================
	cd "$path"/www/"$site"
	info "Adding $domain to new vvv-hosts file... "
	touch vvv-hosts
	printf "%s\n" "$domain" >> vvv-hosts
	echo "Done"

	if [ ! -z "$git_repo" ]; then
		git clone --recursive $git_repo htdocs/wp-content
	fi

	# Add site conf file to nginx-config
	# =============================================================================
	cd "$path"/config/nginx-config/sites
	info "Creating nginx-config/sites/$site.conf... "

	nginx_domain_text="$domain"
	if [[ $multisite = 'y' ]] && [[ $ms_type = 'subdomain' ]]; then
		nginx_domain_text="$domain $multisite_domains"
	fi

	sed -e "s/testserver\.com/$nginx_domain_text/" \
		-e "s|wordpress-local|$site/htdocs|" local-nginx-example.conf-sample > "$site".conf

	if [[ $image_proxy = 'y' ]]; then
		sed -e $'s|\}|\\\n\\\t# Directives to send expires headers and turn off 404 error logging\.\\\n\\\tlocation ~\* \\.\(js\|css\|png\|jpg\|jpeg\|gif\|ico\)\$ \{\\\n\\\t\texpires 24h;\\\n\\\t\\\tlog_not_found off;\\\n\\\t\\\ttry_files \$uri \$uri\/ @production;\\\n\\\t\}\\\n\\\n\\\tlocation @production \{\\\n\\\t\\\tresolver 8\.8\.8\.8;\\\n\\\t\\\tproxy_pass http://LIVE_URL/$uri;\\\n\\\t\}\\\n\}|' -e "s|LIVE_URL|"$live_site_url"|" "$site".conf > tmp.conf
		rm "$site".conf
		mv tmp.conf "$site".conf
	fi

	echo "Done"
}

function run_vagrant_up() {
	# vagrant waaaaay up
	# =============================================================================
	cd "$path"
	if [[ "$files_only" = false ]]; then
		info "Running vagrant up --provision... "
		vagrant up --provision
	fi
}

function creation_success_message() {
	# OMG we're done.
	# =============================================================================
	if [[ "$files_only" = true ]]; then
		info "\nRemember to run \`vagrant up --provision\` to initialize the new site."
	fi

	success "New VVV Site Setup: Done!"
	echo "Directory: $path/www/$site"
	echo "URL:       $domain"
	echo "Username:  $username"
	echo "Password:  $password"
	
	# make terminal go to newly created sites directory
	cd $path/www/$site
}

function create_site() {
	site_creation_questions
	confirm_site_creation
	create_site_files
	run_vagrant_up
	creation_success_message
	exit
}

function not_valid_site() {
	if [[ -z $site || ! -d "$path/www/$site" ]]; then
		error "You must enter a valid directory from $path/www/."
		unset site
	elif [[ $site = 'wordpress-default' || $site = 'wordpress-develop' || $site = 'wordpress-trunk' || $site = 'default' || $site = 'phpcs' || $site = 'vvv-hosts' || $site = 'wp-cli' || $site = '.gitshow' ]]; then
		error "This script can't delete the default VVV folders."
		unset site
	fi
}

function remove_site() { # @TODO refactor this if we need to
	info "VVV Site Removal"

	if [[ ! -z $site ]]; then
		not_valid_site
	fi

	# Get site dir name if not supplied as argument
	while [ -z "$site" ]; do
		prompt "Site directory to delete"
		read -r site
		not_valid_site
	done

	info "\nAbout to perform the following:\n\n* Halt Vagrant (if running)\n* Delete directory $site in $path/www\n* Delete file $site.conf in $path/config/nginx-config/sites\n* Remove any deployments set up with vv\n"
	while [ -z "$continue_delete" ]; do
		prompt "Continue (y/n) "
		read -r continue_delete
		if [ "$continue_delete" = 'y' ]; then
			info "\nVVV teardown starting for site '$site'"
			cd "$path"

			vagrant halt

			# Delete the site folder
			info "Removing directory $site... "
			rm -rf "$path"/www/"$site"
			echo "Done"

			# Remove the nginx conf file
			info "Removing nginx config file $site.conf... "
			rm "$path"/config/nginx-config/sites/"$site".conf
			echo "Done"

			echo -en "Removing any set up deployments. "
			remove_site_remove_all_deployment
			echo "Done"

			# Deleted.
			success "\nVVV Site Teardown: Done!"
			exit

		elif [ "$continue_delete" = 'n' ]; then
			error "Site teardown aborted."
			exit
		else
			error "Answer y or n."
			unset continue_delete
		fi
	done
	exit
}

function deployment_setup_prompt() {
	info "Setting up a deployment."

	if [[ ! -z $site ]]; then
		not_valid_site
	fi

	# Get site dir name if not supplied as argument
	while [ -z "$site" ]; do
		prompt "Which site would you like to setup a deployment for? "
		read -r site
		not_valid_site
	done

}

function deployment_removal_prompt() {
	if [[ ! -z $site ]]; then
		not_valid_site
	fi

	# Get site dir name if not supplied as argument
	while [ -z "$site" ]; do
		prompt "Which site would you like to remove the deployment for? "
		read -r site
		not_valid_site
	done

	while [ -z "$deployment_name" ]; do
		prompt "Name of deployment to remove "
		read -r deployment_name
	done

	remove_deployment

}

function deployment_setup() {
	deployment_setup_prompt
	info "Setting up (S)FTP deployment for $site"

	while [ -z "$deployment_name" ]; do
		prompt "Name of deployment (production, staging, other, etc) "
		read -r deployment_name
	done

	while [ -z "$host" ]; do
		prompt "Host (if SFTP, define port as host:port) "
		read -r host
	done

	while [ -z "$username" ]; do
		prompt "FTP Username "
		read -r username
	done

	while [ -z "$password" ]; do
		prompt "FTP Password "
		read -r password
	done

	if [ -z "$passive" ]; then
		prompt "Use Passive transfer mode? (Y/n) "
		read -r passive
	fi
	if [[ "$passive" = "n" ]]; then
		passive="false"
	else
		passive="true"
	fi


	while [ -z "$secure" ]; do
		prompt "Use SFTP? (y/N)"
		read -r secure
	done
	if [[ "$secure" = "y" ]]; then
		secure="true"
	else
		secure="false"
	fi

	while [ -z "$destination" ]; do
		prompt "Destination path ( You probably want / or ~/public_html )"
		read -r destination
	done

	info "Setting up a deployment in your VVV Vagrantfile with the following information: "
	echo "	Site: $site"
	echo "	Deployment name: $deployment_name"
	echo "	Host: $host"
	echo "	Username: $username"
	echo "	Password: $password"
	echo "	Passive Mode: $passive"
	echo "	Secure Mode: $secure"
	echo "	destination: $destination"
	cp "$path/Vagrantfile" "$path/Vagrantfile-backup"

{
	echo "# begin-vv-$site-$deployment_name"
	echo "	config.push.define \"$site-$deployment_name\", strategy: \"ftp\" do |push|"
	echo "		push.host =\"$host\""
	echo "		push.username =\"$username\""
	echo "		push.password =\"$password\""
	echo "		push.passive =\"$passive\""
	echo "		push.secure =\"$secure\""
	echo "		push.destination =\"$destination\""
	echo "		push.dir = \"htdocs\""
	echo "		push.exclude = \"wp-config.php\""
	echo "	end"
	echo "# end-vv-$site-$deployment_name"
} >> "$path/Vagrantfile"
	echo "$(sed  '$ d' < "$path/Vagrantfile")" > "$path/Vagrantfile"
	echo "end" >> "$path/Vagrantfile"
	success "Deployment setup finished. You can now deploy with a 'vv -v push $site-$deployment_name'"
}

function remove_all_deployment() {
	while [ ! "$remove_deployment_confirm" = "confirm" ]; do
		prompt "Are you sure you want to remove this site's deployment? (type confirm for yes )"
		read -r remove_deployment_confirm
	done
	sed "/\# begin-vv-"$site"/,/\# end-vv-"$site"/d" "$path/Vagrantfile" > "$path/Vagrantfile.tmp"
	mv "$path/Vagrantfile" "$path/Vagrantfile-backup"
	mv "$path/Vagrantfile.tmp" "$path/Vagrantfile"

	success "Deployment for $site removed."
}

function remove_site_remove_all_deployment() {
	sed "/\# begin-vv-"$site"/,/\# end-vv-"$site"/d" "$path/Vagrantfile" > "$path/Vagrantfile.tmp"
	mv "$path/Vagrantfile" "$path/Vagrantfile-backup"
	mv "$path/Vagrantfile.tmp" "$path/Vagrantfile"

	success "Deployment for $site removed."
}

function remove_deployment() {
	while [ ! "$remove_deployment_confirm" = "confirm" ]; do
		prompt "Are you sure you want to remove this site's deployment? (type confirm for yes )"
		read -r remove_deployment_confirm
	done
	sed "/\# begin-vv-"$site"-"$deployment_name"/,/\# end-vv-"$site"-"$deployment_name"/d" "$path/Vagrantfile" > "$path/Vagrantfile.tmp"
	mv "$path/Vagrantfile" "$path/Vagrantfile-backup"
	mv "$path/Vagrantfile.tmp" "$path/Vagrantfile"

	success "Deployment for $site removed."
}

function deployment_config() {
	$EDITOR "$path/Vagrantfile"
}

function create_blueprints() {
	if [[ ! -f "$path"/vv-blueprints.json ]]; then
		curl -o "$path"/vv-blueprints.json -s https://raw.githubusercontent.com/bradp/vv/vv-install/vv-blueprints.json
		success "Created sample blueprints file at $path/vv-blueprints.json."
	else
		info "You already have a vv-blueprints.json file created."
	fi
}

function parse_the_args() {

    if [ ! -z "$list" ]; then
        list_sites
    fi
    if [ ! -z "$create" ]; then
        create_site
    fi
    if [ ! -z "$remove" ]; then
        remove_site
    fi
    if [ ! -z "$deployment_setup" ]; then
    	deployment_setup
    fi
    if [ ! -z "$deployment_remove" ]; then
    	deployment_removal_prompt
    fi
   	if [ ! -z "$deployment_config" ]; then
   		deployment_config
   	fi
    if [ ! -z "$blueprint_init" ]; then
    	create_blueprints
    fi
   	if [ ! -z "$lets_update" ]; then
   		install_update
   	if [ ! -z "$force_update" ]; then
   		vv_bootstrap_update
	fi
   	else
   		check_for_update
   	fi

}

function check_args() {
    while [ ! -z "$1" ]; do
        local arg="$1"
        case "$1" in
			-h|--help|help|h|what)
				local help=0
				shift
				;;
			-p|--path)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 path=$1
				 shift
				 ;;
			-d|--domain)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 domain=$1
				 shift
				 ;;
			-u|--live_url)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 live_site_url=$1
				 shift
				 ;;
			-n|--name)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 site=$1
				 shift
				 ;;
			-wv|--wp-version|--wp_version)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 version=$1
				 shift
				 ;;
			--username)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 username=$1
				 shift
				 ;;
			--password)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 password=$1
				 shift
				 ;;
			--email)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 email=$1
				 shift
				 ;;
			--git-repo|--git_repo)
				 shift

				 if [ -z "$1" ] || [[ "$1" == -* ]]; then
				     argument_expected "$arg"
				 fi

				 git_repo=$1
				 shift
				 ;;
			-m|--multisite)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				fi
				multisite="y"
				ms_type=$1
				shift
				;;
			--host)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				host=$1
				shift
				;;
			--username)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				username=$1
				shift
				;;
			--password)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				password=$1
				shift
				;;
			--passive)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				passive=$1
				shift
				;;
			--secure)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				secure=$1
				shift
				;;
			--destination)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				destination=$1
				shift
				;;
			--deployment-name)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				deployment_name=$1
				shift
				;;
			--blueprint|-b)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				blueprint=$1
				shift
				;;
			v|-v|--vagrant)
				shift

				if [ -z "$1" ] || [[ "$1" == -* ]]; then
				    argument_expected "$arg"
				    exit
				fi
				get_vvv_path
				cd "$path"
				echo "$(vagrant "$1");"
				exit
				shift
				;;
			-r|-rm|--remove|--delete|--rm|--teardown|remove)
				remove="true"
				shift
				;;
			-l|-s|--list|--show|list)
				list="true"
				shift
				;;
			-c|-n|-m|--create|--new|--make|create)
				create="true"
				shift
				;;
			-f|--files)
				files_only="true"
				shift
				;;
			-i|--images)
				image_proxy="true"
				shift
				;;
			-x|--debug)
				wp_debug="y"
				shift
				;;
			-fp|--force-path|--force_path)
				force_path="true"
				shift
				;;
			--version|-version)
				check_for_update
				version
				shift
				;;
			--porcelain|-porcelain)
				clean="true"
				shift
				;;
			-sc|--sample-content)
				placeholder_content="y"
				shift
				;;
			--about|-about)
				check_for_update
				about
				exit
				shift
				;;
			--deployment|--deploy|--deployment-create|--deploy-create)
				deployment_setup="true"
				shift
				;;
			--deployment-remove|--deploy-remove|--deployment_remove|--deploy_remove)
				deployment_remove="true"
				shift
				;;
			--confirm-removal)
				remove_deployment_confirm="confirm"
				shift
				;;
			--deployment-config)
				deployment_config="true"
				shift
				;;
			update|--update)
				lets_update="true"
				shift
				;;
			--force-update)
				force_update="true"
				info "Forcing boostrapped update..."
				shift
				;;
			-bi|--blueprint-init)
				blueprint_init="true"
				shift
				;;
			*)
				fail "Unknown option $1"
				shift
				;;
        esac
    done

    if [ ! -z $help ]; then
        show_help $help
    fi

    get_vvv_path
    parse_the_args

    exit 0
}

function main() {
	auto_update_main

	if [ -z "$1" ]; then
	    show_help
		showing_help="true"
	fi

	check_for_config_file

	check_args "$@"
}

main "$@"
